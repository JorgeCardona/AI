plugins {
	id 'org.springframework.boot' version '2.3.10.RELEASE'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.sonarqube" version "3.2.0"
	id 'jacoco'
}

ext {

	// variables Version
	logstashLogbackEncoder = '6.6'
	openApiVersion = '1.5.8'
	actuatorVersion = '2.4.4'
	junitVersion = '4.13.2'
	jacocoToolVersion = "0.8.5"

	// SonarQube variables
	sonarQubeVersion = '3.8.0.2131'
	sonarQubeHost = 'http://localhost:9000'
	sonarQubeLogin = 'b16a51272de56b9142e79500d1505d8f262d46bf'

	// package for Excluding
	 excludePackage = 'jorge/cardona/concepts'
}

sonarqube {
	properties {
		property "sonar.projectName", "Spring Boot Concepts"
		property "sonar.projectKey", "org.sonarqube:java-gradle-simple"
		property "sonar.java.source", "11"
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.jacoco.reportPaths", "build/jacoco/test/jacocoTestReport.xml"
		property 'sonar.host.url', sonarQubeHost
		property 'sonar.login', sonarQubeLogin
	}
}

group = 'jorge.cardona'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	// permite documentar la aplicacion con anotaciones de OpenApi 3 - Swagger
	// https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-ui
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: openApiVersion

	// permite generar el log en formato JSON
	// https://mvnrepository.com/artifact/net.logstash.logback/logstash-logback-encoder
	implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: logstashLogbackEncoder

	// permite validar el estado de salud de la aplicacion
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.3.10.RELEASE'

	// permite la persistencia de datos usando JPA Repository y CRUD Repository
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// permite que la aplicacion sea web
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Libreria para generar getters, setters, contructores con anotaciones @Data, @Build... y log @Slf4j
	// https://mvnrepository.com/artifact/org.projectlombok/lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Base de Datos en memoria
	// https://mvnrepository.com/artifact/com.h2database/h2
	runtimeOnly 'com.h2database:h2'

	// Valida que los objetos cumplan con las restricciones @Valid
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.4.5'

	// uso de aplicaciones GrpahQL
	// https://mvnrepository.com/artifact/io.leangen.graphql/graphql-spqr-spring-boot-starter
	implementation group: 'io.leangen.graphql', name: 'graphql-spqr-spring-boot-starter', version: '0.0.5'


	// utilizado para pruebas unitarias
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacoco {
	toolVersion = jacocoToolVersion
	reportsDir = file("$buildDir/jacoco")
}

jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"$excludePackage/configuration/**",
					"$excludePackage/entity/Nature**",
					"$excludePackage/repository/**"

			])
		}))
	}
	reports {
		xml.enabled true
		html.enabled true
	}
}