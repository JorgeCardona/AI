plugins {
	id 'org.springframework.boot' version '2.3.10.RELEASE'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.sonarqube" version "3.2.0"
	id 'jacoco'
}

ext {

	// variables Version
	logstashLogbackEncoder = '6.6'
	openApiVersion = '1.5.8'
	actuatorVersion = '2.4.4'
	junitVersion = '4.13.2'
	jacocoToolVersion = "0.8.5"
	mongoRepositoryVersion = '2.3.11.RELEASE'
	embedMongoVersion = '3.0.0'

	// SonarQube variables
	sonarQubeVersion = '3.8.0.2131'
	sonarQubeHost = 'http://localhost:9000'
	sonarQubeLogin = '301fbc40ae451984e24194b712ba8a8a697686fb'

	// package for Excluding
	 excludePackage = 'jorge/cardona/concepts'


	// configuracion de los directorios para los reportes con Jacoco
	jacocoUnifiedReport = "multiConceptProjectsUnifiedReport"
	jacocoReportsDirectory = "${buildDir}/reports"
	jacocoXmlReportDirectory = "${jacocoReportsDirectory}/jacoco.xml"
	jacocoHtmlReportDirectory = "${jacocoReportsDirectory}/jacoco.html"
	multiConceptProjectsUnifiedReportDirectory = "${jacocoReportsDirectory}/jacoco/${jacocoUnifiedReport}/${jacocoUnifiedReport}.xml"

	// configuracion de directorios y archivos a excluir de pruebas unitarias para reporte de cobertura
	applicationPackageName   = 'jorge/cardona/concepts'
}

sonarqube {

	properties {
		property "sonar.sourceEnconding", "UTF-8"
		property "sonar.projectName", "Jorge Cardona - Spring Boot Multi Concept Projects"
		property "sonar.projectKey", "org.sonarqube:java-gradle-simple"
		property "sonar.java.source", "11"
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.jacoco.reportPaths", multiConceptProjectsUnifiedReportDirectory
		property 'sonar.host.url', sonarQubeHost
		property 'sonar.login', sonarQubeLogin
	}
}

allprojects {

	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'java'
	apply plugin: 'jacoco'
	apply plugin: 'org.sonarqube'

	repositories {
		mavenCentral()
	}

	test{
		useJUnitPlatform();
	}

	dependencies {
		// permite que la aplicacion sea web
		// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
		implementation 'org.springframework.boot:spring-boot-starter-web'

		// permite documentar la aplicacion con anotaciones de OpenApi 3 - Swagger
		// https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-ui
		implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: openApiVersion

		// permite generar el log en formato JSON
		// https://mvnrepository.com/artifact/net.logstash.logback/logstash-logback-encoder
		implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: logstashLogbackEncoder

		// permite validar el estado de salud de la aplicacion
		// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator
		implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.3.10.RELEASE'

		// Libreria para generar getters, setters, contructores con anotaciones @Data, @Build... y log @Slf4j
		// https://mvnrepository.com/artifact/org.projectlombok/lombok
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		// Valida que los objetos cumplan con las restricciones @Valid
		// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
		implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.4.5'
		testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.4.5'

		// utilizado para pruebas unitarias
		testImplementation('org.springframework.boot:spring-boot-starter-test') {
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
	}
}

subprojects {

	dependencies {}

	// reportes quedan el el directorio build/reports
	jacocoTestReport {
		dependsOn test
		reports {
			xml.enabled true
			xml.destination file("${jacocoXmlReportDirectory}")
			html.enabled true
			html.destination file("${jacocoHtmlReportDirectory}")
			csv.enabled false
		}
	}

}

// une los reportes dentro de un directorio, genera reportes individuales y crea un reporte unificado para publicar la cobertura de las pruebas unitarias
task multiConceptProjectsUnifiedReport(type: JacocoReport) {

	dependsOn = subprojects.jacocoTestReport
	additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
	sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
	classDirectories.setFrom files(subprojects.sourceSets.main.output)
	executionData.setFrom project.fileTree(dir:'.', include: '**/build/jacoco/test.exec')

	// tipos de extensiones de arhivos en los cuales se va a generar reportes
	reports{
		html.enabled = true
		xml.enabled = true
		csv.enabled = false
	}

	onlyIf = {
		true
	}

	doFirst {
		executionData.setFrom project.fileTree(dir:'.', include: '**/build/jacoco/test.exec')
	}

	// excluye todos los archivos y carpetas que no se tienen en cuenta de pruebas unitarias para el reporte final del html, xml y que se sube al sonar
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude:
					[
							"${applicationPackageName}/**/config**",
							"${applicationPackageName}/**/**Application**"
					])
		}))
	}
}

// tarea creada para ejecuta las tareas multiConceptProjectsUnifiedReport(para crear el reporte ) y luego sonarqube(que publica el reporte)
task publishSonarCoverage(dependsOn:['multiConceptProjectsUnifiedReport', 'sonarqube'])

tasks.withType(JavaCompile) {
	options.compilerArgs = [
			'-Amapstruct.suppressGeneratorTimestamp=true'
	]
}